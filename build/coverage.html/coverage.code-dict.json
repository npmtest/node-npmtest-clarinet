{"/home/travis/build/npmtest/node-npmtest-clarinet/test.js":"/* istanbul instrument in package npmtest_clarinet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clarinet/lib.npmtest_clarinet.js":"/* istanbul instrument in package npmtest_clarinet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_clarinet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_clarinet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-clarinet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-clarinet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_clarinet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_clarinet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_clarinet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_clarinet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_clarinet.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_clarinet.__dirname + '/lib.npmtest_clarinet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clarinet/node_modules/clarinet/clarinet.js":";(function (clarinet) {\n  // non node-js needs to set clarinet debug on root\n  var env\n    , fastlist\n    ;\n\nif(typeof process === 'object' && process.env) env = process.env;\nelse env = window;\n\n  clarinet.parser            = function (opt) { return new CParser(opt);};\n  clarinet.CParser           = CParser;\n  clarinet.CStream           = CStream;\n  clarinet.createStream      = createStream;\n  clarinet.MAX_BUFFER_LENGTH = 64 * 1024;\n  clarinet.DEBUG             = (env.CDEBUG==='debug');\n  clarinet.INFO              = (env.CDEBUG==='debug' || env.CDEBUG==='info');\n  clarinet.EVENTS            =\n    [ \"value\"\n    , \"string\"\n    , \"key\"\n    , \"openobject\"\n    , \"closeobject\"\n    , \"openarray\"\n    , \"closearray\"\n    , \"error\"\n    , \"end\"\n    , \"ready\"\n    ];\n\n  var buffers     = [ \"textNode\", \"numberNode\" ]\n    , streamWraps = clarinet.EVENTS.filter(function (ev) {\n          return ev !== \"error\" && ev !== \"end\";\n        })\n    , S           = 0\n    , Stream\n    ;\n\n  clarinet.STATE =\n    { BEGIN                             : S++\n    , VALUE                             : S++ // general stuff\n    , OPEN_OBJECT                       : S++ // {\n    , CLOSE_OBJECT                      : S++ // }\n    , OPEN_ARRAY                        : S++ // [\n    , CLOSE_ARRAY                       : S++ // ]\n    , TEXT_ESCAPE                       : S++ // \\ stuff\n    , STRING                            : S++ // \"\"\n    , BACKSLASH                         : S++\n    , END                               : S++ // No more stack\n    , OPEN_KEY                          : S++ // , \"a\"\n    , CLOSE_KEY                         : S++ // :\n    , TRUE                              : S++ // r\n    , TRUE2                             : S++ // u\n    , TRUE3                             : S++ // e\n    , FALSE                             : S++ // a\n    , FALSE2                            : S++ // l\n    , FALSE3                            : S++ // s\n    , FALSE4                            : S++ // e\n    , NULL                              : S++ // u\n    , NULL2                             : S++ // l\n    , NULL3                             : S++ // l\n    , NUMBER_DECIMAL_POINT              : S++ // .\n    , NUMBER_DIGIT                      : S++ // [0-9]\n    };\n\n  for (var s_ in clarinet.STATE) clarinet.STATE[clarinet.STATE[s_]] = s_;\n\n  // switcharoo\n  S = clarinet.STATE;\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function f () { this[\"__proto__\"] = o; }\n      f.prototype = o;\n      return new f;\n    };\n  }\n\n  if (!Object.getPrototypeOf) {\n    Object.getPrototypeOf = function (o) {\n      return o[\"__proto__\"];\n    };\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = [];\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n      return a;\n    };\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(clarinet.MAX_BUFFER_LENGTH, 10)\n      , maxActual = 0\n      ;\n    for (var i = 0, l = buffers.length; i < l; i ++) {\n      var len = parser[buffers[i]].length;\n      if (len > maxAllowed) {\n        switch (buffers[i]) {\n          case \"text\":\n            closeText(parser);\n          break;\n\n          default:\n            error(parser, \"Max buffer length exceeded: \"+ buffers[i]);\n        }\n      }\n      maxActual = Math.max(maxActual, len);\n    }\n    parser.bufferCheckPosition = (clarinet.MAX_BUFFER_LENGTH - maxActual)\n                               + parser.position;\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i ++) {\n      parser[buffers[i]] = \"\";\n    }\n  }\n\n  var stringTokenPattern = /[\\\\\"\\n]/g;\n\n  function CParser (opt) {\n    if (!(this instanceof CParser)) return new CParser (opt);\n\n    var parser = this;\n    clearBuffers(parser);\n    parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH;\n    parser.q        = parser.c = parser.p = \"\";\n    parser.opt      = opt || {};\n    parser.closed   = parser.closedRoot = parser.sawRoot = false;\n    parser.tag      = parser.error = null;\n    parser.state    = S.BEGIN;\n    parser.stack    = new Array();\n    // mostly just for error reporting\n    parser.position = parser.column = 0;\n    parser.line     = 1;\n    parser.slashed  = false;\n    parser.unicodeI = 0;\n    parser.unicodeS = null;\n    parser.depth    = 0;\n    emit(parser, \"onready\");\n  }\n\n  CParser.prototype =\n    { end    : function () { end(this); }\n    , write  : write\n    , resume : function () { this.error = null; return this; }\n    , close  : function () { return this.write(null); }\n    };\n\n  try        { Stream = require(\"stream\").Stream; }\n  catch (ex) { Stream = function () {}; }\n\n  function createStream (opt) { return new CStream(opt); }\n\n  function CStream (opt) {\n    if (!(this instanceof CStream)) return new CStream(opt);\n\n    this._parser = new CParser(opt);\n    this.writable = true;\n    this.readable = true;\n\n    //var Buffer = this.Buffer || function Buffer () {}; // if we don't have Buffers, fake it so we can do `var instanceof Buffer` and not throw an error\n    this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n    this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n    this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n    this.string = '';\n\n    var me = this;\n    Stream.apply(me);\n\n    this._parser.onend = function () { me.emit(\"end\"); };\n    this._parser.onerror = function (er) {\n      me.emit(\"error\", er);\n      me._parser.error = null;\n    };\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, \"on\" + ev,\n        { get          : function () { return me._parser[\"on\" + ev]; }\n        , set          : function (h) {\n            if (!h) {\n              me.removeAllListeners(ev);\n              me._parser[\"on\"+ev] = h;\n              return h;\n            }\n            me.on(ev, h);\n          }\n        , enumerable   : true\n        , configurable : false\n        });\n    });\n  }\n\n  CStream.prototype = Object.create(Stream.prototype,\n    { constructor: { value: CStream } });\n\n  CStream.prototype.write = function (data) {\n    data = new Buffer(data);\n    for (var i = 0; i < data.length; i++) {\n      var n = data[i];\n\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = data[j];\n        }\n        this.string = this.temp_buffs[this.bytes_in_sequence].toString();\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n\n        // move iterator forward by number of byte read during sequencing\n        i = i + j - 1;\n\n        // pass data to parser and move forward to parse rest of data\n        this._parser.write(this.string);\n        this.emit(\"data\", this.string);\n        continue;\n      }\n\n      // if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n      if (this.bytes_remaining === 0 && n >= 128) {\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > data.length) { // if bytes needed to complete char fall outside data length, we have a boundary split\n\n          for (var k = 0; k <= (data.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = data[i + k]; // fill temp data of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - data.length;\n\n          // immediately return as we need another chunk to sequence the character\n          return true;\n        } else {\n          this.string = data.slice(i, (i + this.bytes_in_sequence)).toString();\n          i = i + this.bytes_in_sequence - 1;\n\n          this._parser.write(this.string);\n          this.emit(\"data\", this.string);\n          continue;\n        }\n      }\n\n      // is there a range of characters that are immediately parsable?\n      for (var p = i; p < data.length; p++) {\n        if (data[p] >= 128) break;\n      }\n      this.string = data.slice(i, p).toString();\n      this._parser.write(this.string);\n      this.emit(\"data\", this.string);\n      i = p - 1;\n\n      // handle any remaining characters using multibyte logic\n      continue;\n    }\n  };\n\n  CStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) this._parser.write(chunk.toString());\n    this._parser.end();\n    return true;\n  };\n\n  CStream.prototype.on = function (ev, handler) {\n    var me = this;\n    if (!me._parser[\"on\"+ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser[\"on\"+ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]]\n                 : Array.apply(null, arguments);\n        args.splice(0, 0, ev);\n        me.emit.apply(me, args);\n      };\n    }\n    return Stream.prototype.on.call(me, ev, handler);\n  };\n\n  CStream.prototype.destroy = function () {\n    clearBuffers(this._parser);\n    this.emit(\"close\");\n  };\n\n  function emit(parser, event, data) {\n    if(clarinet.INFO) console.log('-- emit', event, data);\n    if (parser[event]) parser[event](data);\n  }\n\n  function emitNode(parser, event, data) {\n    closeValue(parser);\n    emit(parser, event, data);\n  }\n\n  function closeValue(parser, event) {\n    parser.textNode = textopts(parser.opt, parser.textNode);\n    if (parser.textNode) {\n      emit(parser, (event ? event : \"onvalue\"), parser.textNode);\n    }\n    parser.textNode = \"\";\n  }\n\n  function closeNumber(parser) {\n    if (parser.numberNode)\n      emit(parser, \"onvalue\", parseFloat(parser.numberNode));\n    parser.numberNode = \"\";\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim();\n    if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n    return text;\n  }\n\n  function error (parser, er) {\n    closeValue(parser);\n    er += \"\\nLine: \"+parser.line+\n          \"\\nColumn: \"+parser.column+\n          \"\\nChar: \"+parser.c;\n    er = new Error(er);\n    parser.error = er;\n    emit(parser, \"onerror\", er);\n    return parser;\n  }\n\n  function end(parser) {\n    if (parser.state !== S.VALUE || parser.depth !== 0)\n      error(parser, \"Unexpected end\");\n\n    closeValue(parser);\n    parser.c      = \"\";\n    parser.closed = true;\n    emit(parser, \"onend\");\n    CParser.call(parser, parser.opt);\n    return parser;\n  }\n\n  function write (chunk) {\n    var parser = this;\n    if (this.error) throw this.error;\n    if (parser.closed) return error(parser,\n      \"Cannot write after close. Assign an onready handler.\");\n    if (chunk === null) return end(parser);\n    var i = 0, c = chunk[0], p = parser.p;\n    if (clarinet.DEBUG) console.log('write -> [' + chunk + ']');\n    while (c) {\n      p = c;\n      parser.c = c = chunk.charAt(i++);\n      // if chunk doesnt have next, like streaming char by char\n      // this way we need to check if previous is really previous\n      // if not we need to reset to what the parser says is the previous\n      // from buffer\n      if(p !== c ) parser.p = p;\n      else p = parser.p;\n\n      if(!c) break;\n\n      if (clarinet.DEBUG) console.log(i,c,clarinet.STATE[parser.state]);\n      parser.position ++;\n      if (c === \"\\n\") {\n        parser.line ++;\n        parser.column = 0;\n      } else parser.column ++;\n      switch (parser.state) {\n\n        case S.BEGIN:\n          if (c === \"{\") parser.state = S.OPEN_OBJECT;\n          else if (c === \"[\") parser.state = S.OPEN_ARRAY;\n          else if (c !== '\\r' && c !== '\\n' && c !== ' ' && c !== '\\t')\n            error(parser, \"Non-whitespace before {[.\");\n        continue;\n\n        case S.OPEN_KEY:\n        case S.OPEN_OBJECT:\n          if (c === '\\r' || c === '\\n' || c === ' ' || c === '\\t') continue;\n          if(parser.state === S.OPEN_KEY) parser.stack.push(S.CLOSE_KEY);\n          else {\n            if(c === '}') {\n              emit(parser, 'onopenobject');\n              this.depth++;\n              emit(parser, 'oncloseobject');\n              this.depth--;\n              parser.state = parser.stack.pop() || S.VALUE;\n              continue;\n            } else  parser.stack.push(S.CLOSE_OBJECT);\n          }\n          if(c === '\"') parser.state = S.STRING;\n          else error(parser, \"Malformed object key should start with \\\"\");\n        continue;\n\n        case S.CLOSE_KEY:\n        case S.CLOSE_OBJECT:\n          if (c === '\\r' || c === '\\n' || c === ' ' || c === '\\t') continue;\n          var event = (parser.state === S.CLOSE_KEY) ? 'key' : 'object';\n          if(c===':') {\n            if(parser.state === S.CLOSE_OBJECT) {\n              parser.stack.push(S.CLOSE_OBJECT);\n              closeValue(parser, 'onopenobject');\n               this.depth++;\n            } else closeValue(parser, 'onkey');\n            parser.state  = S.VALUE;\n          } else if (c==='}') {\n            emitNode(parser, 'oncloseobject');\n            this.depth--;\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else if(c===',') {\n            if(parser.state === S.CLOSE_OBJECT)\n              parser.stack.push(S.CLOSE_OBJECT);\n            closeValue(parser);\n            parser.state  = S.OPEN_KEY;\n          } else error(parser, 'Bad object');\n        continue;\n\n        case S.OPEN_ARRAY: // after an array there always a value\n        case S.VALUE:\n          if (c === '\\r' || c === '\\n' || c === ' ' || c === '\\t') continue;\n          if(parser.state===S.OPEN_ARRAY) {\n            emit(parser, 'onopenarray');\n            this.depth++;\n            parser.state = S.VALUE;\n            if(c === ']') {\n              emit(parser, 'onclosearray');\n              this.depth--;\n              parser.state = parser.stack.pop() || S.VALUE;\n              continue;\n            } else {\n              parser.stack.push(S.CLOSE_ARRAY);\n            }\n          }\n               if(c === '\"') parser.state = S.STRING;\n          else if(c === '{') parser.state = S.OPEN_OBJECT;\n          else if(c === '[') parser.state = S.OPEN_ARRAY;\n          else if(c === 't') parser.state = S.TRUE;\n          else if(c === 'f') parser.state = S.FALSE;\n          else if(c === 'n') parser.state = S.NULL;\n          else if(c === '-') { // keep and continue\n            parser.numberNode += c;\n          } else if(c==='0') {\n            parser.numberNode += c;\n            parser.state = S.NUMBER_DIGIT;\n          } else if('123456789'.indexOf(c) !== -1) {\n            parser.numberNode += c;\n            parser.state = S.NUMBER_DIGIT;\n          } else               error(parser, \"Bad value\");\n        continue;\n\n        case S.CLOSE_ARRAY:\n          if(c===',') {\n            parser.stack.push(S.CLOSE_ARRAY);\n            closeValue(parser, 'onvalue');\n            parser.state  = S.VALUE;\n          } else if (c===']') {\n            emitNode(parser, 'onclosearray');\n            this.depth--;\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else if (c === '\\r' || c === '\\n' || c === ' ' || c === '\\t')\n              continue;\n          else error(parser, 'Bad array');\n        continue;\n\n        case S.STRING:\n          // thanks thejh, this is an about 50% performance improvement.\n          var starti              = i-1\n            , slashed = parser.slashed\n            , unicodeI = parser.unicodeI\n            ;\n          STRING_BIGLOOP: while (true) {\n            if (clarinet.DEBUG)\n              console.log(i,c,clarinet.STATE[parser.state]\n                         ,slashed);\n            // zero means \"no unicode active\". 1-4 mean \"parse some more\". end after 4.\n            while (unicodeI > 0) {\n              parser.unicodeS += c;\n              c = chunk.charAt(i++);\n              parser.position++;\n              if (unicodeI === 4) {\n                // TODO this might be slow? well, probably not used too often anyway\n                parser.textNode += String.fromCharCode(parseInt(parser.unicodeS, 16));\n                unicodeI = 0;\n                starti = i-1;\n              } else {\n                unicodeI++;\n              }\n              // we can just break here: no stuff we skipped that still has to be sliced out or so\n              if (!c) break STRING_BIGLOOP;\n            }\n            if (c === '\"' && !slashed) {\n              parser.state = parser.stack.pop() || S.VALUE;\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              if(!parser.textNode) {\n                 emit(parser, \"onvalue\", \"\");\n              }\n              break;\n            }\n            if (c === '\\\\' && !slashed) {\n              slashed = true;\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              c = chunk.charAt(i++);\n              parser.position++;\n              if (!c) break;\n            }\n            if (slashed) {\n              slashed = false;\n                   if (c === 'n') { parser.textNode += '\\n'; }\n              else if (c === 'r') { parser.textNode += '\\r'; }\n              else if (c === 't') { parser.textNode += '\\t'; }\n              else if (c === 'f') { parser.textNode += '\\f'; }\n              else if (c === 'b') { parser.textNode += '\\b'; }\n              else if (c === 'u') {\n                // \\uxxxx. meh!\n                unicodeI = 1;\n                parser.unicodeS = '';\n              } else {\n                parser.textNode += c;\n              }\n              c = chunk.charAt(i++);\n              parser.position++;\n              starti = i-1;\n              if (!c) break;\n              else continue;\n            }\n\n            stringTokenPattern.lastIndex = i;\n            var reResult = stringTokenPattern.exec(chunk);\n            if (reResult === null) {\n              i = chunk.length+1;\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              break;\n            }\n            i = reResult.index+1;\n            c = chunk.charAt(reResult.index);\n            if (!c) {\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              break;\n            }\n          }\n          parser.slashed = slashed;\n          parser.unicodeI = unicodeI;\n        continue;\n\n        case S.TRUE:\n          if (c==='')  continue; // strange buffers\n          if (c==='r') parser.state = S.TRUE2;\n          else error(parser, 'Invalid true started with t'+ c);\n        continue;\n\n        case S.TRUE2:\n          if (c==='')  continue;\n          if (c==='u') parser.state = S.TRUE3;\n          else error(parser, 'Invalid true started with tr'+ c);\n        continue;\n\n        case S.TRUE3:\n          if (c==='') continue;\n          if(c==='e') {\n            emit(parser, \"onvalue\", true);\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else error(parser, 'Invalid true started with tru'+ c);\n        continue;\n\n        case S.FALSE:\n          if (c==='')  continue;\n          if (c==='a') parser.state = S.FALSE2;\n          else error(parser, 'Invalid false started with f'+ c);\n        continue;\n\n        case S.FALSE2:\n          if (c==='')  continue;\n          if (c==='l') parser.state = S.FALSE3;\n          else error(parser, 'Invalid false started with fa'+ c);\n        continue;\n\n        case S.FALSE3:\n          if (c==='')  continue;\n          if (c==='s') parser.state = S.FALSE4;\n          else error(parser, 'Invalid false started with fal'+ c);\n        continue;\n\n        case S.FALSE4:\n          if (c==='')  continue;\n          if (c==='e') {\n            emit(parser, \"onvalue\", false);\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else error(parser, 'Invalid false started with fals'+ c);\n        continue;\n\n        case S.NULL:\n          if (c==='')  continue;\n          if (c==='u') parser.state = S.NULL2;\n          else error(parser, 'Invalid null started with n'+ c);\n        continue;\n\n        case S.NULL2:\n          if (c==='')  continue;\n          if (c==='l') parser.state = S.NULL3;\n          else error(parser, 'Invalid null started with nu'+ c);\n        continue;\n\n        case S.NULL3:\n          if (c==='') continue;\n          if(c==='l') {\n            emit(parser, \"onvalue\", null);\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else error(parser, 'Invalid null started with nul'+ c);\n        continue;\n\n        case S.NUMBER_DECIMAL_POINT:\n          if(c==='.') {\n            parser.numberNode += c;\n            parser.state       = S.NUMBER_DIGIT;\n          } else error(parser, 'Leading zero not followed by .');\n        continue;\n\n        case S.NUMBER_DIGIT:\n          if('0123456789'.indexOf(c) !== -1) parser.numberNode += c;\n          else if (c==='.') {\n            if(parser.numberNode.indexOf('.')!==-1)\n              error(parser, 'Invalid number has two dots');\n            parser.numberNode += c;\n          } else if (c==='e' || c==='E') {\n            if(parser.numberNode.indexOf('e')!==-1 ||\n               parser.numberNode.indexOf('E')!==-1 )\n               error(parser, 'Invalid number has two exponential');\n            parser.numberNode += c;\n          } else if (c===\"+\" || c===\"-\") {\n            if(!(p==='e' || p==='E'))\n              error(parser, 'Invalid symbol in number');\n            parser.numberNode += c;\n          } else {\n            closeNumber(parser);\n            i--; // go back one\n            parser.state = parser.stack.pop() || S.VALUE;\n          }\n        continue;\n\n        default:\n          error(parser, \"Unknown state: \" + parser.state);\n      }\n    }\n    if (parser.position >= parser.bufferCheckPosition)\n      checkBufferLength(parser);\n    return parser;\n  }\n\n})(typeof exports === \"undefined\" ? clarinet = {} : exports);\n","/home/travis/build/npmtest/node-npmtest-clarinet/node_modules/clarinet/bench/async.js":"// forked from github.com/creationix/jsonparse\n\n// brew install yajl\n// npm install jsonparse yajl\n\n// node bench/async.js samples/npm.json\n//                    jsonfile         \nvar fs         = require('fs')\n  , clarinet   = require('../clarinet')\n  , Parser     = require('jsonparse')\n  , jsonparser\n  , p\n  , s\n  , start\n  , max        = process.argv[3] || 1\n  , n          = process.argv[4] || 9\n  , averages   = {}\n  ;\n\nfunction update_averages(what, time) {\n  if(averages[what]) {\n    averages[what].n++;\n    averages[what].time = averages[what].time + time;\n  }\n  else averages[what] = {n: 1, time: time};\n}\n\nconsole.log('=N(\"node bench/async.js ' + process.argv[2] + ' ' +\n     max + ' ' + n + '\")');\nconsole.log('=N(\"clp (clarinet parser), cls (clarinet event emitter)\")');\n//console.log('=N(\"jpp (creationix/jsonparse)\")');\n\nfunction stream_bench(cb) {\n  s          = clarinet.createStream();\n  s.on('end', function () {\n    var exectime = Date.now()-start;\n    console.log('cls, %s', exectime);\n    update_averages('cls', exectime);\n    cb();\n  });\n  var fs_read = fs.createReadStream(process.argv[2]);\n  fs_read.setEncoding('utf-8');\n  fs_read.on('data', function(chunk) { \n    for (var i = 0; i < max; i++) s.write(chunk); \n  });\n  fs_read.on('end', function () { s.end(); });\n  start = Date.now();\n}\n\nfunction parser_bench(cb) {\n  p          = clarinet.parser();\n  p.onend = function () { \n    var exectime = Date.now()-start;\n    console.log('clp, %s', exectime);\n    update_averages('clp', exectime);    cb();\n  };\n  var fs_read = fs.createReadStream(process.argv[2]);\n  fs_read.setEncoding('utf-8');\n  fs_read.on('data', function(chunk) { \n    for (var i = 0; i < max; i++) p.write(chunk); \n  });\n  fs_read.on('end', function () { \n    p.end(); \n    if(n===0) process.exit();\n    n--;\n    setTimeout(repeat,0);\n  });\n  start = Date.now();\n}\n\nfunction repeat() {\n  stream_bench(function () {\n    return parser_bench(function(){ }); });\n}\n\nfunction output_avg() {\n  console.log('=N(\"# Version\")');\n  console.log('=N(\"' + JSON.stringify(process.versions).replace(/\"/g, \"'\") + '\")');\n  console.log('=N(\"# Summary\")');\n  for(var k in averages) {\n    console.log('=N(\"* %s [%s]: %s ms\")', k, averages[k].n, \n      averages[k].time/averages[k].n);\n  }\n}\n\nprocess.on('SIGINT', function () {\n  output_avg();\n  process.exit(1);\n});\n\nprocess.on('exit', output_avg);\n\nrepeat();","/home/travis/build/npmtest/node-npmtest-clarinet/node_modules/clarinet/bench/sync.js":"// forked from github.com/creationix/jsonparse\n\n// brew install yajl\n// npm install jsonparse yajl\n\n// node bench/sync.js samples/npm.json 5\n//                    jsonfile         number of cycles\n\nvar fs         = require('fs')\n  , clarinet   = require('../clarinet')\n  , Parser     = require('jsonparse')\n  , jsonparser = new Parser()\n  , file       = fs.readFileSync(process.argv[2])\n  , string     = file.toString()\n  , p          = clarinet.parser()\n  , s          = clarinet.createStream()\n  , max        = process.argv[3] || 1\n  , n          = process.argv[4] || 9\n  ;\n\nconsole.log('=N(\"node bench/sync.js ' + process.argv[2] + ' ' +\n   max + ' ' + n + '\")');\nconsole.log('=N(\"clp (clarinet parser), cls (clarinet event emitter)\")');\nconsole.log('=N(\"jpp (creationix/jsonparse), v8s (JSON.parse string)\")');\nconsole.log('=N(\"v8b (JSON.parse buffer)\")');\n\nwhile (true) {\n  try {\n    start = Date.now();\n    for (var i = 0; i < max; i++) p.write(string);\n    console.log(\"clp, %s\", Date.now()-start);\n  } catch (ex1) { }\n\n  // slower\n  try {\n    start = Date.now();\n    for (var i = 0; i < max; i++) s.write(string);\n    console.log(\"cls, %s\", Date.now()-start);\n  } catch (ex1) { }\n\n  try {\n    start = Date.now();\n    for (var i = 0; i < max; i++) jsonparser.write(file);\n    console.log(\"jpp, %s\", Date.now()-start);\n  } catch (ex2) { }\n\n  try {\n    start = Date.now();\n    for (var i = 0; i < max; i++) JSON.parse(string);\n    console.log(\"v8s, %s\", Date.now()-start);\n  } catch (ex3) { }\n\n  // slower\n  try {\n    start = Date.now();\n    for (var i = 0; i < max; i++) JSON.parse(file);\n    console.log(\"v8b, %s\", Date.now()-start);\n  } catch (ex4) { }\n\n  if(n===0) return;\n  n--;\n}\n","/home/travis/build/npmtest/node-npmtest-clarinet/node_modules/clarinet/samples/loggly.js":"var fs              = require('fs')\n  , Stream          = require('stream').Stream\n  , clarinet        = require('../clarinet')\n  , parse_stream    = clarinet.createStream()\n  , previous        = ''\n  , buffer          = {}\n  , stack           = []\n  , new_thing       = false\n  ;\n\nfunction debug_log() {\n  if(process.env.DEBUG) {\n    console.log.apply(null, arguments);\n  }\n}\n\nparse_stream.on('openobject', function(name) {\n  if(new_thing) {\n    console.log(JSON.stringify(buffer, null, 2));\n    buffer = {};\n    new_thing = false;\n  }\n  previous = name;\n  stack.push(name);\n  debug_log('=== {', name, buffer);\n});\n\nparse_stream.on('closeobject', function() {\n  stack.pop();\n  debug_log('=== }', null, buffer);\n});\n\nparse_stream.on('key', function(name) {\n  previous = name;\n  stack.pop();\n  stack.push(name);\n  debug_log('=== ,', name, buffer);\n});\n\nparse_stream.on('value', function(value) {\n  if(previous === 'event') {\n    value = JSON.parse(value);\n  }\n  var expected = stack.length-1;\n  stack.reduce(function (ac, x, i) {\n    if(i === expected) {\n      ac[x] = value;\n    }\n    ac[x] = ac[x] || {};\n    return ac[x];\n  }, buffer);\n  debug_log('=== v', value, buffer);\n});\n\nparse_stream.on('error', function (e) {\n  new_thing = true;\n});\n\nfunction fixLogglyStream() {\n  var log_stream  = new Stream();\n  log_stream.readable = true;\n  log_stream.writable = true;\n\n  log_stream.write = function (buf) {\n    var as_string = buf.toString('utf-8').replace(/\\\\\\\\/g, '\\\\');\n    this.emit('data', as_string);\n  };\n\n  log_stream.end = function (buf) {\n    if (arguments.length) {\n      log_stream.write(buf);\n    }\n    log_stream.writable = false;\n  };\n\n  log_stream.destroy = function () {\n    log_stream.writable = false;\n  };\n\n  return log_stream;\n}\n\nfs.createReadStream(__dirname + '/loggly.txt')\n  .pipe(fixLogglyStream())\n  .pipe(parse_stream)\n  ;","/home/travis/build/npmtest/node-npmtest-clarinet/node_modules/clarinet/samples/npm.js":"// all npm authors sorted by number of repos\nvar fs             = require('fs')\n  , clarinet       = require('../clarinet')\n  , parse_stream   = clarinet.createStream()\n  , author         = false\n  , authors        = {}\n  ;\n\n\nparse_stream.on('openobject', function(name) {\n  if(name==='author') author=true;\n});\n\nparse_stream.on('key', function(name) {\n  if(name==='author') author=true;\n});\n\nparse_stream.on('end', function () {\n  var sorted = []\n    , i\n    ;\n  for (var a in authors)\n    sorted.push([a, authors[a]]);\n  sorted.sort(function(a, b) { return a[1] - b[1]; });\n  i = sorted.length-1;\n  while(i!==-1) {\n    console.log(sorted.length-i, sorted[i]);\n    i--;\n  }\n});\n\nparse_stream.on('value', function(value) {\n  if(author) { \n    var current_count = authors[value];\n    if (current_count) authors[value] +=1;\n    else authors[value] = 1;\n    author=false; \n  }\n});\n\nfs.createReadStream(__dirname + '/npm.json').pipe(parse_stream);","/home/travis/build/npmtest/node-npmtest-clarinet/node_modules/clarinet/samples/twitter.js":"// get a bunch of twitter streams\nvar stuff_to_search_for = \n  [ 'nodejs', 'nodejitsu', 'hadoop', 'couchdb', 'nosql', 'birds', 'dinosaurs'\n  , 'fun', 'dscape', 'clown', 'joyent', 'nyc', 'usa', 'portugal'];\n\n// npm install request fast-list clarinet\nvar request        = require('request');\nvar fs             = require('fs');\nvar clarinet       = require('../clarinet');\nvar p              = 1;\nvar buffer         = [];\nvar tweets         = ['['];\nvar parse_stream   = clarinet.createStream();\nvar stacklevel     = 0;\nvar objlevel       = 0;\nvar found_results  = false;\nvar notfirst       = false;\nvar stop_searching = false;\nvar previous       = '';\nvar i            = 0;\nvar on_array     = false;\nvar array_vals   = [];\n\nfunction uri (pop) {\n  var term;\n  if(pop) i++;\n  if(stuff_to_search_for[i]) {\n    term = stuff_to_search_for[i];\n    return 'http://search.twitter.com/search.json?q=' + term +\n           '&rpp=100&page=';\n  }\n  else\n    return null;\n}\n\nparse_stream.on('openarray', function() {\n  previous = '[';\n  if(found_results) {\n    if(stacklevel !== 0) { buffer.push('['); on_array = true; }\n    stacklevel++;\n  }\n});\n\nparse_stream.on('closearray', function() {\n  if(found_results) {\n    stacklevel--;\n    if(stacklevel === 0) {\n      tweets.push(buffer.join(''));\n      buffer = [];\n      found_results = false;\n      if(previous === '[')  // [] means no more results\n        stop_searching = true;\n    } else {\n      buffer.push(array_vals.join(','));\n      array_vals = [];\n      on_array = false;\n      buffer.push(']'); \n    }\n  }\n  previous = ']';\n});\n\nparse_stream.on('openobject', function(name) {\n  previous = '{';\n  if(found_results) {\n    if(objlevel === 0 && notfirst) { buffer.push(','); }\n    if(name!=='result_type') { buffer.push('\\n'); }\n    buffer.push('{\"' + name + '\": ');\n    notfirst = true;\n    objlevel++;\n  }\n});\n\nparse_stream.on('key', function(name) {\n  previous = ':';\n  if(found_results) {\n    buffer.push(', \"' + name + '\": ');\n  }\n  if(name==='results' && !found_results) { \n    found_results = true; \n  }\n});\n\nparse_stream.on('closeobject', function() {\n  previous = '}';\n  if(found_results) {\n    objlevel--;\n    buffer.push('}');\n  }\n});\n\nparse_stream.on('end', function() {\n  previous = '!';\n  if(tweets.length === 0) stop_searching = true;\n  console.log(tweets.join(''));\n});\n\nparse_stream.on('ready', function () {\n  var r_uri;\n  if(stop_searching) {\n    r_uri = uri(true);\n    if(r_uri === null) {\n      console.log(']');\n      return;\n    } else { \n      p = 1; \n      stop_searching = false;\n    }\n  }\n  r_uri = r_uri || uri();\n  tweets = [];\n  \n  if(r_uri!==null) {\n    request.get(r_uri+p)\n      .pipe(parse_stream);\n    p++;\n  }\n});\n\nparse_stream.on('value', function(value) {\n  if(found_results) {\n    var bla;\n    if(typeof value === 'string' || value === null)\n      bla = JSON.stringify(value);\n    else bla = value;\n    if (on_array) array_vals.push(bla); \n    else { buffer.push(bla); }\n  }\n});\n\nvar s_uri = uri();\nif(s_uri!==null)\n  request.get(uri()+p)\n    .pipe(parse_stream);\np++;"}